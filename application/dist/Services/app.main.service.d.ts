import { messageNotificationInterface, responseMessageInterface, fingerprintDataInterface, connectionInterface, locationTagInterface, locationRelationInterface } from '../FileInterface/file_message_type.interface';
export interface StandardFingerprintInterface {
    getConnectionStatus(): any;
    setConnectionStatus(data: connectionInterface): any;
    refreshConnectionStatus(): any;
    PerformfingerprintTemplateMatching(): any;
    fingerprintTemplate(): any;
    registerFingerprint(fingerprintData: any): any;
    UpdateLocalStorage(): any;
    GetRemoteStorage(): any;
    GetAllVerifiedLocalFPIds(): any;
    readFingerprintTemplateData(): any;
    getFingerprintTemplateData(): any;
    setFingerprintTemplateData(data: fingerprintDataInterface): any;
    readMessageNotificationData(): any;
    getMessageNotificationData(): any;
    setMessageNotificationData(data: messageNotificationInterface): any;
    readReturnMessageData(): any;
    getResponseMessageData(): any;
    setResponseMessageData(data: responseMessageInterface): any;
    countFileTotal(): any;
    getFingerprintImageTotal(): any;
    setFingerprintImageTotal(num: number): any;
    readLocationTagData(): any;
    getLocationTagData(): locationTagInterface[];
    setLocationTagData(data: locationTagInterface): any;
    readLocationRelationData(): any;
    getLocationRelationData(): locationRelationInterface[];
    setLocationRelationData(data: locationRelationInterface): any;
    postErrorMessage(message: string): any;
}
export declare class StandardFingerprint implements StandardFingerprintInterface {
    private _messageNotificationData;
    private _fingerprintImageTotal;
    private _responseMessageData;
    private _fingerprintTemplateData;
    private _addLocationTag;
    private _addLocationRelation;
    private connectionStatus;
    private VerifiedUUIDArray;
    private readonly remoteUrl;
    private storageController;
    private locationTagController;
    private locationRelationController;
    constructor();
    getConnectionStatus(): string;
    setConnectionStatus(data: connectionInterface): void;
    refreshConnectionStatus(): Promise<connectionInterface>;
    private fingerprintTemplateMatching;
    PerformfingerprintTemplateMatching(): string;
    fingerprintTemplate(): Promise<string>;
    registerFingerprint(fingerprintData: any): void;
    private RegisterFingerprintData;
    private PerformRegisterFingerprintData;
    UpdateLocalStorage(): void;
    GetRemoteStorage(): Promise<any>;
    GetAllVerifiedLocalFPIds(): string[];
    readFingerprintTemplateData(): void;
    getFingerprintTemplateData(): fingerprintDataInterface[];
    setFingerprintTemplateData(data: fingerprintDataInterface): void;
    readMessageNotificationData(): void;
    getMessageNotificationData(): messageNotificationInterface[];
    setMessageNotificationData(data: messageNotificationInterface): void;
    readReturnMessageData(): void;
    getResponseMessageData(): responseMessageInterface[];
    setResponseMessageData(data: responseMessageInterface): void;
    countFileTotal(): void;
    getFingerprintImageTotal(): number;
    setFingerprintImageTotal(num: number): void;
    readLocationTagData(): void;
    getLocationTagData(): locationTagInterface[];
    setLocationTagData(data: locationTagInterface): void;
    readLocationRelationData(): void;
    getLocationRelationData(): locationRelationInterface[];
    setLocationRelationData(data: locationRelationInterface): void;
    postErrorMessage(message: string): any;
    testrelation(): void;
}
